

****************Important commands 

Deploying proxyinet :
docker-compose up -d 

Deploying EtherCalc:
cd /root/RAVSoft_tools/EtherCalc	(this directory has docker-compose file)
docker-compose up -d

Deploying etherpad :
docker pull etherpad/etherpad
docker run -d -p 8082:9001 etherpad/etherpad

Deploying openproject : 
docker run -d -p 8083:80 --name openproject -e SECRET_KEY_BASE=secret -v /var/lib/openproject/pgdata:/var/openproject/pgdata  -v /var/lib/openproject/assets:/var/openproject/assets  openproject/community:12

Deploying Docuwiki : 
cd /root/RAVSoft_tools/DocuWiki/
docker-compose up -d

***************************************
https://www.middlewareinventory.com/blog/docker-reverse-proxy-example/

Ethercalc git repo : https://github.com/audreyt/ethercalc
Etherpad git repo : https://github.com/ether/etherpad-lite/blob/develop/doc/docker.md

Deploying EtherCalc:
cd /root/RAVSoft_tools/EtherCalc	(this directory has docker-compose file)
docker-compose up -d

Deploying etherpad :
docker pull etherpad/etherpad
docker run -d -p 8082:9001 etherpad/etherpad


ether calc : http://192.168.50.180:8081/
ether pad : http://192.168.50.180:8082/


Proxy work for Etherpad and Etherpad : 
http://192.168.50.180/ethercalc
http://192.168.50.180/etherpad


docker container run \
--publish 8090:80 \
-d --name apacheserver \
-v /root/EtherCalc_and_Etherpad_with_Http_Proxy_Server/Docker-Httpd-proxy-server/sites:/usr/local/apache2/conf/sites \
httpd-proxyenabled

**********openproject through single containers : 
deploying openproject : 
docker run -d -p 8083:80 --name openproject -e SECRET_KEY_BASE=secret -v /var/lib/openproject/pgdata:/var/openproject/pgdata  -v /var/lib/openproject/assets:/var/openproject/assets  openproject/community:12

- db and other assets are stored outside the container : /var/lib/openproject

- openproject admin credentials:
	http://192.168.50.180:8083/
	admin/pa$$word180s

********Steps to proxyinet VM setup:
systemctl start docker
systemctl restart network
sudo systemctl enable /usr/lib/systemd/system/docker.service  (autostart docker on system boot)

cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
172.217.160.142   dl.google.com

cat /etc/resolv.conf
search medusa.local
nameserver 8.8.8.8
nameserver 192.168.50.9


cat /etc






----------------------Openproject :
https://www.openproject.org/docs/installation-and-operations/installation/docker/

Installation steps through docker compose : 
Quick Start
First, you must clone the openproject-deploy repository:

git clone https://github.com/opf/openproject-deploy --depth=1 --branch=stable/12 openproject
Then, go into the compose folder:

cd openproject/compose
Make sure you are using the latest version of the Docker images:

docker-compose pull
Launch the containers:

docker-compose up -d
After a while, OpenProject should be up and running on http://localhost:8080. The default username and password is login: admin, and password: admin.

Note that the docker-compose.yml file present in the repository can be adjusted to your convenience. For instance you could mount specific configuration files, override environment variables, or switch off services you don’t need. Please refer to the official Docker Compose documentation for more details.

You can stop the Compose stack by running:
docker-compose down

----------------All-in-one container
Quick Start
The fastest way to get an OpenProject instance up and running is to run the following command:

docker run -it -p 8080:80 -e SECRET_KEY_BASE=secret openproject/community:12
This will take a bit of time the first time you launch it, but after a few minutes you should see a success message indicating the default administration password (login: admin, password: admin).

You can then launch a browser and access your new OpenProject installation at http://localhost:8080. Easy!

To stop the container, simply hit CTRL-C.

Note that the above command will not daemonize the container and will display the logs to your terminal, which helps with debugging if anything goes wrong. For normal usage you probably want to start it in the background, which can be achieved with the -d flag:

docker run -d -p 8080:80 -e SECRET_KEY_BASE=secret openproject/community:12
Note: We’ve had reports of people being unable to start OpenProject this way because of an issue regarding pseudo-TTY allocations and permissions to write to /dev/stdout. If you run into this, a workaround seems to be to add -t to your run command, even if you run in detached mode.

-----------Using this container in production

The one-liner above is great to get started quickly, but we strongly advise against using this setup for production purposes.

Also, if you want to run OpenProject in production you need to ensure that your data is not lost if you restart the container.

To achieve this, we recommend that you create a directory on your host system where the Docker Engine is installed (for instance: /var/lib/openproject) where all this data will be stored.

You can use the following commands to create the local directories where the data will be stored across container restarts, and start the container with those directories mounted:

sudo mkdir -p /var/lib/openproject/{pgdata,assets} 

docker run -d -p 8083:80 --name openproject \
  -e SERVER_HOSTNAME=openproject.ravsoft.com \ # The public facing host name
  -e SECRET_KEY_BASE=secret \ # The secret key base used for cookies
  -v /var/lib/openproject/pgdata:/var/openproject/pgdata \
  -v /var/lib/openproject/assets:/var/openproject/assets \
  openproject/community:12
  
docker run -d -p 8083:80 --name openproject -e SECRET_KEY_BASE=secret -v /var/lib/openproject/pgdata:/var/openproject/pgdata  -v /var/lib/openproject/assets:/var/openproject/assets  openproject/community:12
  
Please make sure you set the correct public facing hostname in SERVER_HOSTNAME. If you don’t have a load-balancing or proxying web server in front of your docker container, you will otherwise be vulnerable to HOST header injections, as the internal server has no way of identifying the correct host name.

Note: Make sure to replace secret with a random string. One way to generate one is to run head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32 ; echo '' if you are on Linux.

Note: MacOS users might encounter an “Operation not permitted” error on the mounted directories. The fix for this is to create the two directories in a user-owned directory of the host machine.

Since we named the container, you can now stop it by running:

docker stop openproject
And start it again:

docker start openproject
If you want to destroy the container, run the following commands

docker stop openproject
docker rm openproject


-------------------------------------------Docuwiki


https://hub.docker.com/r/bitnami/dokuwiki/#!	(imp)
https://www.dokuwiki.org/dokuwiki
https://github.com/linuxserver/docker-dokuwiki

Default credentials : 
Available environment variables:

User and Site configuration
      - DOKUWIKI_USERNAME=admin
      - DOKUWIKI_FULL_NAME=ravsoft_admin
      - DOKUWIKI_PASSWORD=admin1234
      - DOKUWIKI_EMAIL=rahul.sharma@ravsoftsolutions.com
      - DOKUWIKI_WIKI_NAME=RAVSoft DokuWiki
